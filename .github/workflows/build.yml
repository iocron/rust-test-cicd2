name: Cross Compile Rust Application

# on: [push, pull_request]
on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"

permissions: 
  contents: write

jobs:
  build:
    strategy:
      matrix:
        # os: [ubuntu-latest, windows-latest, macos-latest]
        job: 
          - { target: x86_64-unknown-linux-musl, exe: amd64-linux, os: ubuntu-latest }
          - { target: aarch64-unknown-linux-musl, exe: aarch64-linux, os: ubuntu-latest }
          - { target: armv7-unknown-linux-musleabi, exe: armv7-linux, os: ubuntu-latest }
          - { target: x86_64-apple-darwin, exe: macos, os: macos-latest }
          - { target: x86_64-pc-windows-msvc, exe: windows.exe, os: windows-2019 }
          # - { target: wasm32-wasi, exe: wasi.wasm, os: ubuntu-latest }
    runs-on: ${{ matrix.job.os }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set Up Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.job.target }}
          override: true
          components: rust-src # necessary for wasi, because there isn't a cross image for it

      - name: Run Tests
        run: cargo test

      - name: Install Crossbuild Tool
        run: cargo install cross

      - name: Cross Compilation
        run: |
          cross build --release --locked --target=${{ matrix.job.target }}

      # - name: Cross Compile for Linux
      #   if: startsWith(matrix.os, 'ubuntu')
      #   run: |
      #     cross build --release --target x86_64-unknown-linux-gnu
            # You may also want to generate a standalone executable:
            # run: cargo build --release --target x86_64-pc-windows-gnu --features standalone

      # - name: Run cargo check
      #   uses: actions-rs/cargo@v1
      #   with:
      #     command: check

      - name: Archive Builds
        run: |
          RUNNER_OS_LC="$(echo "$RUNNER_OS" | perl -ne 'print lc')"
          RUNNER_ARCH_LC="$(echo "$RUNNER_ARCH" | perl -ne 'print lc')"
          APP_NAME="rust-string-replacer"
          APP_NAME_SUFFIX="$(if [[ "$RUNNER_OS_LC" == "windows" ]]; then echo '.exe'; fi)"
          
          mkdir artifacts
          cp "target/${{ matrix.job.target }}/release/${APP_NAME}${APP_NAME_SUFFIX}" "artifacts/$APP_NAME-${{ matrix.job.exe }}"
        shell: bash

      - name: Upload Builds
        uses: actions/upload-artifact@v3
        with:
          name: cross-compiled-builds
          path: artifacts/*
          if-no-files-found: error

  release:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts/
      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: artifacts/**
          fail_on_unmatched_files: true
