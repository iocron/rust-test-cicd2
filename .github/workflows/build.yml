name: Cross Compile Rust Application

# on: [push, pull_request]
on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"

permissions: 
  contents: write

jobs:
  build:
    strategy:
      matrix:
        # os: [ubuntu-latest, windows-latest, macos-latest]
        # arch: [armv6l, armv7l, aarch64]
        job: 
          # GitHub Actions Runner Images: https://github.com/actions/runner-images
          # (see also: https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#choosing-github-hosted-runners)
          # - { target: x86_64-unknown-linux-musl, exe: amd64-linux, os: ubuntu-latest }
          - { target: aarch64-unknown-linux-gnu, exe: aarch64-linux, os: ubuntu-latest }
          # - { target: armv7-unknown-linux-musleabi, exe: armv7-linux, os: ubuntu-latest }
          # - { target: x86_64-pc-windows-msvc, exe: windows.exe, os: windows-latest }
          # - { target: x86_64-apple-darwin, exe: amd64-macos, os: macos-latest }
          # - { target: aarch64-apple-darwin, exe: aarch64-macos, os: macos-latest } # TODO: Not working
          # - { target: wasm32-wasi, exe: wasi.wasm, os: ubuntu-latest }
    runs-on: ${{ matrix.job.os }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Github Action Images already contain rust, rustup, ..
      # - name: Setup Rust / Rustup
      #   run: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
      #   shell: bash

      # - name: Run Tests
      #   run: cargo test

      # - name: Install Crossbuild
        # run: cargo install cross
        # run: cargo install cross --git https://github.com/cross-rs/cross

      # - name: Run Crossbuild
        # run: cross build --release --locked --target=${{ matrix.job.target }}

      - name: Setup Rust Dependencies
        run: |
          # rustup self update
          # rustup toolchain install stable-${{ matrix.job.target }}
          # rustup target add stable-${{ matrix.job.target }}

          rustup target add --toolchain stable ${{ matrix.job.target }}
          rustup toolchain install --force-non-host stable

      - name: Aarch64 Linux Workaround
        if: ${{ matrix.job.target }} == "aarch64-unknown-linux-gnu"
        run: | 
          sudo apt install build-essential
          # sudo apt install clang

      - name: Build Rust Binaries
        run: cargo build --release --target=${{ matrix.job.target }}

      # - name: Cross Compile for Linux
      #   if: startsWith(matrix.os, 'ubuntu')
      #   run: |
      #     cross build --release --target x86_64-unknown-linux-gnu
            # You may also want to generate a standalone executable:
            # run: cargo build --release --target x86_64-pc-windows-gnu --features standalone

      # - name: Run cargo check
      #   uses: actions-rs/cargo@v1
      #   with:
      #     command: check

      - name: Archive Builds
        run: |
          RUNNER_OS_LC="$(echo "$RUNNER_OS" | perl -ne 'print lc')"
          RUNNER_ARCH_LC="$(echo "$RUNNER_ARCH" | perl -ne 'print lc')"

          APP_NAME="rust-string-replacer"
          APP_NAME_SUFFIX="$(if [[ "$RUNNER_OS_LC" == "windows" ]]; then echo '.exe'; fi)"
          
          mkdir artifacts
          cp "target/${{ matrix.job.target }}/release/${APP_NAME}${APP_NAME_SUFFIX}" "artifacts/$APP_NAME-${{ matrix.job.exe }}"
        shell: bash

      - name: Upload Builds
        uses: actions/upload-artifact@v3
        with:
          name: cross-compiled-builds
          path: artifacts/*
          if-no-files-found: error

  release:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts/
      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: artifacts/**
          fail_on_unmatched_files: true
