name: Cross Compile Rust Application

# on: [push, pull_request]
on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"

permissions: 
  contents: write

jobs:
  build:
    strategy:
      matrix:
        # os: [ubuntu-latest, windows-latest, macos-latest]
        # arch: [armv6l, armv7l, aarch64]
        job: 
          # GitHub Actions Runner Images: https://github.com/actions/runner-images
          # (see also: https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#choosing-github-hosted-runners)
          - { target: x86_64-unknown-linux-musl, os: ubuntu-latest,  file_suffix: x64-linux,     file_ext: "",      build_type: cargo }
          - { target: aarch64-unknown-linux-gnu, os: ubuntu-latest,  file_suffix: aarch64-linux, file_ext: "",      build_type: cross }
          - { target: x86_64-pc-windows-msvc,    os: windows-latest, file_suffix: x64,           file_ext: ".exe",   build_type: cargo }
          - { target: aarch64-pc-windows-msvc,   os: windows-latest, file_suffix: aarch64,       file_ext: ".exe",   build_type: cargo }
          - { target: x86_64-apple-darwin,       os: macos-latest,   file_suffix: x64-macos,     file_ext: "",      build_type: cargo }
          - { target: aarch64-apple-darwin,      os: macos-latest,   file_suffix: aarch64-macos, file_ext: "",      build_type: cargo } 
          - { target: wasm32-wasi,               os: ubuntu-latest,  file_suffix: wasi,          file_ext: ".wasm",  build_type: cargo }
    runs-on: ${{ matrix.job.os }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Github Action Images already contain rust, rustup, ..
      # - name: Setup Rust / Rustup
      #   run: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
      #   shell: bash

      - name: Run Tests
        run: | 
          cargo test
          echo "Tests ran successfully." >> $GITHUB_STEP_SUMMARY

      - name: Run Build 
        run: |
          if [[ "${{ matrix.job.build_type }}" == "cargo" ]]; then
            ## CARGO BUILD
            # rustup self update
            rustup target add --toolchain stable ${{ matrix.job.target }}
            rustup toolchain install --force-non-host stable
            cargo build --release --locked --target=${{ matrix.job.target }}
          elif [[ "${{ matrix.job.build_type }}" == "cross" ]]; then
            ## CROSS BUILD
            ## (for problematic targets or fallbacks, mainly for arm/arch)
            cargo install cross # --git https://github.com/cross-rs/cross
            cross build --release --locked --target=${{ matrix.job.target }}
          else 
            echo "ERROR: build_type \"${{ matrix.job.build_type }}\" failed or not defined."
            exit 1
          fi

          # (https://docs.github.com/en/get-started/writing-on-github/working-with-advanced-formatting/organizing-information-with-tables)
          # (https://github.blog/2022-05-09-supercharging-github-actions-with-job-summaries/)
          # echo "## Run Build" >> $GITHUB_STEP_SUMMARY
          echo "| Target                   | OS                   | Build Type                   |" >> $GITHUB_STEP_SUMMARY
          echo "| ------------------------ | -------------------- | ---------------------------- |" >> $GITHUB_STEP_SUMMARY
          echo "| ${{ matrix.job.target }} | ${{ matrix.job.os }} | ${{ matrix.job.build_type }} |" >> $GITHUB_STEP_SUMMARY
        shell: bash
          
      # - name: Cross Compile for Linux
      #   if: startsWith(matrix.os, 'ubuntu')
      #   run: |
      #     cross build --release --target x86_64-unknown-linux-gnu
            # You may also want to generate a standalone executable:
            # run: cargo build --release --target x86_64-pc-windows-gnu --features standalone

      # - name: Run cargo check
      #   uses: actions-rs/cargo@v1
      #   with:
      #     command: check

      - name: Archive Builds
        run: |
          # RUNNER_OS_LC="$(echo "$RUNNER_OS" | perl -ne 'print lc')"
          # RUNNER_ARCH_LC="$(echo "$RUNNER_ARCH" | perl -ne 'print lc')"

          # TODO (OSX Bug): PACKAGE_NAME="$(grep -E '^name\s?=' Cargo.toml | head -1 | sed -E 's/(name\s?=\s?)"(.*)".*$/\2/g')"
          # PACKAGE_NAME="rust-string-replacer"
          PACKAGE_NAME="$(grep -E '^name\s?=' Cargo.toml | head -1 | xargs printf "%s" | cut -d'=' -f2)"
          SOURCE_PATH="target/${{ matrix.job.target }}/release/${PACKAGE_NAME}${{ matrix.job.file_ext }}"
          TARGET_PATH="artifacts/${PACKAGE_NAME}-${{ matrix.job.file_suffix }}${{ matrix.job.file_ext }}"

          mkdir artifacts

          echo "copy $SOURCE_PATH to $TARGET_PATH"
          cp "$SOURCE_PATH" "$TARGET_PATH"
        shell: bash

      - name: Upload Builds
        uses: actions/upload-artifact@v3
        with:
          name: cross-compiled-builds
          path: artifacts/*
          if-no-files-found: error

  release:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts/
      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: artifacts/**
          fail_on_unmatched_files: true
