# We could use `@actions-rs/cargo` Action ability to automatically install `cross` tool
# in order to compile our application for some unusual targets.

# on: [push, pull_request]

name: Cross Compile Rust Application

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"

permissions: 
  contents: write

jobs:
  build:
    strategy:
      matrix:
        # os: [ubuntu-latest]
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      # - name: Checkout Repository
      #   uses: actions/checkout@v3
        # with: 
        #   path: master

      - uses: actions/checkout@v2
      - name: Set Up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      # - name: Install Toolchains
      #   run: |
      #     rustup install stable
      #     rustup default stable     

      # - name: Install Dependencies
      #   run: |
      #     # Add any dependency installations you need here
      #     # Example (for Ubuntu): sudo apt update && sudo apt-get install -y build-essential
      #     # Example (for Windows): choco install -y visualstudio2019buildtools

      - name: Run Tests
        run: cargo test

      - name: Cross Compile for Linux
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          cargo build --release --target x86_64-unknown-linux-gnu
          cargo build --release --target aarch64-unknown-linux-gnu # TODO: NOT WORKING

      - name: Cross Compile for macOS
        if: startsWith(matrix.os, 'macos')
        run: | 
          cargo build --release --target x86_64-apple-darwin
          cargo build --release --target aarch64-apple-darwin # TODO: NOT WORKING

      - name: Cross Compile for Windows
        if: startsWith(matrix.os, 'windows')
        run: |
          cargo build --release --target x86_64-pc-windows-gnu
          cargo build --release --target aarch64-pc-windows-msvc # TODO: MAYBE WORKING?
        # You may also want to generate a standalone executable:
        # run: cargo build --release --target x86_64-pc-windows-gnu --features standalone

      # - name: Run cargo check
      #   uses: actions-rs/cargo@v1
      #   with:
      #     command: check

      - name: Archive Builds
        run: |
          APP_NAME="rust-string-replacer"
          RUNNER_OS_LC="$(echo "$RUNNER_OS" | perl -ne 'print lc')"
          RUNNER_ARCH_LC="$(echo "$RUNNER_ARCH" | perl -ne 'print lc')"

          mkdir artifacts

          if [[ "$RUNNER_OS_LC" == "linux" ]]; then 
            cp "target/x86_64-unknown-linux-gnu/release/$APP_NAME" "artifacts/$APP_NAME-$RUNNER_OS_LC-x64"
            # cp "target/aarch64-unknown-linux-gnu/release/$APP_NAME" "artifacts/$APP_NAME-$RUNNER_OS_LC-arm64"
            echo "ubuntu artifacts copied successfully."
          elif [[ "$RUNNER_OS_LC" == "macos" ]]; then 
            cp "target/x86_64-apple-darwin/release/$APP_NAME" "artifacts/$APP_NAME-$RUNNER_OS_LC-x64"
            # cp "target/aarch64-apple-darwin/release/$APP_NAME" "artifacts/$APP_NAME-$RUNNER_OS_LC-arm64"
            echo "osx artifacts copied successfully."
          elif [[ "$RUNNER_OS_LC" == "windows" ]]; then 
            cp "target/x86_64-pc-windows-gnu/release/$APP_NAME.exe" "artifacts/$APP_NAME-$RUNNER_OS_LC-x64.exe"
            # cp "target/aarch64-pc-windows-msvc/release/$APP_NAME.exe" "artifacts/$APP_NAME-$RUNNER_OS_LC-arm64.exe"
            echo "windows artifacts copied successfully."
          else 
            echo "ERROR: $RUNNER_OS_LC not supported"
            exit 1 
          fi
        shell: bash

      - name: Upload Builds
        uses: actions/upload-artifact@v3
        with:
          name: cross-compiled-builds
          path: artifacts/*
          if-no-files-found: error

  release:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts/
      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: artifacts/**
          fail_on_unmatched_files: true
